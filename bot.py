from config import BOT_TOKEN
from aiogram import Bot, Dispatcher, types, executor
from datetime import datetime, date
from db import init_db, ensure_user, add_run, get_user_stats, get_user_history, get_leaderboard

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

tracked_groups = set()


def is_group_chat(message: types.Message):
    return message.chat.type in ["group", "supergroup"]


import asyncio
from datetime import datetime, date
from db import (
    init_db, ensure_user, add_run, get_user_stats, 
    get_user_history, get_leaderboard, get_all_users_in_group, get_users_with_runs_today
)

# ...

async def daily_reminder():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00 –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –ø—Ä–æ–±–µ–∂–∫–µ"""
    while True:
        now = datetime.now()
        target = now.replace(hour=19, minute=0, second=0, microsecond=0)
        if now > target:
            # –µ—Å–ª–∏ —É–∂–µ –ø–æ–∑–∂–µ 19:00, –∂–¥—ë–º –¥–æ –∑–∞–≤—Ç—Ä–∞
            target = target.replace(day=now.day + 1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        # –ö–æ–≥–¥–∞ –Ω–∞—Å—Ç–∞–ª–æ 19:00 ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        for group_id in tracked_groups:
            await send_group_reminder(group_id)

async def send_group_reminder(group_id):
    # –í—Å–µ —é–∑–µ—Ä—ã –≥—Ä—É–ø–ø—ã
    all_users = get_all_users_in_group(group_id)
    # –ö—Ç–æ —É–∂–µ –±–µ–≥–∞–ª —Å–µ–≥–æ–¥–Ω—è
    ran_today = get_users_with_runs_today(group_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—Ç–æ –µ—â—ë –Ω–µ –±–µ–≥–∞–ª
    not_ran = [u for u in all_users if u[0] not in ran_today]

    if not not_ran:
        await bot.send_message(group_id, "üî• –í—Å–µ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –±–µ–≥–∞–ª–∏! –ö—Ä–∞—Å–∞–≤–∞!")
        return

    mentions = []
    for user_id, username in not_ran:
        if username:
            mentions.append(f"@{username}")
        else:
            mentions.append(f"[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})")

    text = "üïñ –£–∂–µ 19:00! –°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±–µ–≥–∞–ª–∏:\n" + ", ".join(mentions) + "\n\n–ù–µ —Ñ–∞–ø–∞–π—Ç–µ ‚Äì –±–µ–≥–∏—Ç–µ!"
    await bot.send_message(group_id, text, parse_mode="Markdown")



HELP_TEXT = (
    "üèÉ *RundOrFap* ‚Äî –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –ø—Ä–æ–±–µ–∂–µ–∫ –≤ –≥—Ä—É–ø–ø–µ.\n\n"
    "–û–Ω —Ö—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã *—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã*.\n\n"
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/run <–∫–º> <–º–∏–Ω:—Å–µ–∫> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É\n"
    "/stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    "/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–±–µ–∂–µ–∫\n"
    "/leaderboard ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã\n"
    "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n"
    "_–î–æ–±–∞–≤–ª—è–π –ø—Ä–æ–±–µ–∂–∫–∏, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –Ω–µ —Ñ–∞–ø–∞–π –≤–º–µ—Å—Ç–æ –±–µ–≥–∞!_"
)

@dp.message_handler(commands=['start', 'help'])
async def start(message: types.Message):
    if not is_group_chat(message):
        return
    await message.answer(HELP_TEXT, parse_mode="Markdown")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not is_group_chat(message):
        return
    await message.answer(
        "üèÉ RundOrFap –∞–∫—Ç–∏–≤–µ–Ω!\n"
        "–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–±–µ–∂–∫–∏: /run <–∫–º> <–º–∏–Ω:—Å–µ–∫>\n"
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats\n"
        "–ò—Å—Ç–æ—Ä–∏—è: /history\n"
        "–õ–∏–¥–µ—Ä–±–æ—Ä–¥: /leaderboard\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è **—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã**."
    )

@dp.message_handler(commands=['run'])
async def cmd_run(message: types.Message):
    if not is_group_chat(message):
        return
    group_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.full_name

    # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ -> —Ç–æ—á–∫–∏
    text = message.text.replace(",", ".").strip()
    # –û–∂–∏–¥–∞–µ–º: /run 5.6 –∑–∞ 22.4
    parts = text.split()

    if len(parts) < 3 or parts[2] != "–∑–∞":
        await message.reply("–§–æ—Ä–º–∞—Ç: /run <–∫–º> –∑–∞ <–º–∏–Ω—É—Ç—ã>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /run 5.6 –∑–∞ 22.4")
        return

    try:
        distance = float(parts[1])  # –∫–∏–ª–æ–º–µ—Ç—Ä—ã
        time_part = parts[3]        # –≤—Ä–µ–º—è (–º–æ–∂–µ—Ç –±—ã—Ç—å 22 –∏–ª–∏ 22.4 –∏–ª–∏ 27:30)

        if ":" in time_part:
            # —Ñ–æ—Ä–º–∞—Ç –º–∏–Ω—É—Ç:—Å–µ–∫—É–Ω–¥
            mm, ss = time_part.split(":")
            duration = int(mm) * 60 + int(ss)
        else:
            # —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –º–∏–Ω—É—Ç–∞–º–∏
            minutes_float = float(time_part)
            full_seconds = int(minutes_float * 60)
            duration = full_seconds
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä—ã:\n/run 5.6 –∑–∞ 22.4\n/run 7 –∑–∞ 30\n/run 5.6 –∑–∞ 27:30")
        return

    ensure_user(group_id, user_id, username)
    add_run(group_id, user_id, username, distance, duration)

    # —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –≤—ã–≤–æ–¥
    m = duration // 60
    s = duration % 60
    # —Ç–µ–º–ø (–º–∏–Ω/–∫–º)
    pace_sec_per_km = duration / distance
    pace_m = int(pace_sec_per_km // 60)
    pace_s = int(pace_sec_per_km % 60)

    await message.answer(
        f"‚úÖ {username} –¥–æ–±–∞–≤–∏–ª {distance} –∫–º –∑–∞ {m}:{s:02d}\n"
        f"–¢–µ–º–ø: {pace_m}:{pace_s:02d} –º–∏–Ω/–∫–º"
    )
    tracked_groups.add(message.chat.id)


@dp.message_handler(commands=['stats'])
async def cmd_stats(message: types.Message):
    if not is_group_chat(message):
        return
    group_id = message.chat.id
    user_id = message.from_user.id

    stats = get_user_stats(group_id, user_id)
    if not stats or stats[0] == 0:
        await message.answer(f"{message.from_user.full_name}, —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
        return

    count, total_distance, total_duration = stats
    avg_pace = total_duration / total_distance if total_distance else 0
    min_per_km = int(avg_pace // 60)
    sec_per_km = int(avg_pace % 60)

    await message.answer(
        f"üèÉ {message.from_user.full_name}\n"
        f"–ü—Ä–æ–±–µ–∂–µ–∫: {count}\n"
        f"–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_distance:.1f} –∫–º\n"
        f"–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {min_per_km}:{sec_per_km:02d} –º–∏–Ω/–∫–º"
    )
    tracked_groups.add(message.chat.id)

@dp.message_handler(commands=['history'])
async def cmd_history(message: types.Message):
    if not is_group_chat(message):
        return
    group_id = message.chat.id
    user_id = message.from_user.id

    rows = get_user_history(group_id, user_id)
    if not rows:
        await message.answer("–ù–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫.")
        return

    text = f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏ {message.from_user.full_name}:\n"
    for d, dur, date in rows:
        m = dur // 60
        s = dur % 60
        text += f"{date[:10]} ‚Äî {d} –∫–º –∑–∞ {m}:{s:02d}\n"
    await message.answer(text)

@dp.message_handler(commands=['leaderboard'])
async def cmd_leaderboard(message: types.Message):
    if not is_group_chat(message):
        return
    group_id = message.chat.id

    rows = get_leaderboard(group_id)
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –±–µ–≥–∞–ª –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        return

    text = "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –≥—Ä—É–ø–ø—ã:\n"
    for i, (user, km) in enumerate(rows, start=1):
        text += f"{i}. {user} ‚Äî {km:.1f} –∫–º\n"
    await message.answer(text)
    tracked_groups.add(message.chat.id)


if __name__ == "__main__":
    init_db()
    loop = asyncio.get_event_loop()
    loop.create_task(daily_reminder())  # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–∏–Ω–≥
    executor.start_polling(dp, skip_updates=True)
